#!/usr/bin/env ruby

=begin
    
File:      gitgot
Version:   0.2.1
Author:    Austin Ewens
Created:   2014-11-12
Copyright: (c) 2014-5 Austin Ewens
License:   Gitgot may be freely distributed under public domain.
Purpose:   Automate simple tasks for dealing with Git (for Github/BitBucket)
    
=end

require "yaml"

# To deal with ^C
trap("SIGINT") { puts; exit }

def run cmds
    %x[#{cmds.map{|x|x.sub("\n", "")}.join(";")}]
end

def commands argv
    root = File.expand_path(File.dirname(__FILE__))
    argv.each do |arg|
        case arg
        when "new"
            config = "#{root}/_gitgot.yml"
            user = nil
            if File.file? config
                conf = YAML.load(File.read(config))
                user = conf[:use]
                api  = conf[:api]
            else
                print "user: "
                user = $stdin.gets.chomp
                print "api: "
                apii = $stdin.gets.chomp
                case apii
                when "gh"
                    api = "https://api.github.com/user/repos"
                when "bb"
                    api = "https://api.bitbucket.org/1.0/repositories/"
                else
                    api = "https://api.github.com/user/repos"
                end
            end
            print "repo: "
            repo = $stdin.gets.chomp
            print "desc: "
            desc = $stdin.gets.chomp
            
            site = []
            case api
            when /github/
                site = ["github","com"]
            when /bitbucket/
                site = ["bitbucket","org"]
            else
                site = ["github","com"]
            end
            
            sitee = site.join(".")
            
            cmd  = []
            cmd << "git init"
            case site[0]
            when "github"
                cmd << "curl -u '#{user}' #{api} -d \
                        '{\"name\":\"#{repo}\", \"description\":\"#{desc}\"}'"
                cmd << "git remote add origin \
                        git@#{sitee}:#{user}/#{repo}.git"
            when "bitbucket"
                cmd << "curl --user '#{user}' \
                        https://api.bitbucket.org/1.0/repositories/ \
                        --data name=#{repo} --data is_private=true"
                cmd << "git remote add origin \
                        https://#{user}@#{sitee}/#{user}/#{repo}.git"
            else
                cmd << "curl -u '#{user}' #{api} -d \
                        '{\"name\":\"#{repo}\", \"description\":\"#{desc}\"}'"
                cmd << "git remote add origin git@#{sitee}:#{user}/#{repo}.git"
            end
            cmd << "git add ."
            cmd << "git commit -m 'Initial commit'"
            cmd << "git push -u origin master"
            run(cmd)
            
            words = "# A repo for \"#{user}\" was initialized at \
\"#{repo}\" for \"#{desc}\""

            puts "\n#{words.sub("\n","")}\n\n"
        when "commit"
            print "reason: "
            reason = $stdin.gets.chomp
            cmd  = []
            cmd << "git add ."
            cmd << "git commit -m \"#{reason}\""
            cmd << "git push"
            run(cmd)
        when "profile" 
            regex = /^(true|t|yes|y)$/
            config = "#{root}/_gitgot.yml"
            print "user: "
            user = $stdin.gets.chomp
            print "email: "
            email = $stdin.gets.chomp
            print "api: "
            apii = $stdin.gets.chomp
            print "use?: "
            use  = regex =~ $stdin.gets.chomp ? true : false
            conf = nil
            case apii
            when "gh"
                api = "https://api.github.com/user/repos"
            when "bb"
                api = "https://api.bitbucket.org/1.0/repositories/"
            else
                api = "https://api.github.com/user/repos"
            end
            if File.file? config
                conf = YAML.load(File.read(config))
                if use
                    conf[:use] = user
                    conf[:email] = email
                else
                    conf[:not] = {} if conf[:not].nil?
                    conf[:not] << {:user=>user,:email=>email}
                end
                conf[:api] = api
            else
                if use
                    conf = {:use=>user,:email=>email} 
                else 
                    conf = {}
                    conf[:not] << {:user=>user,:email=>email}
                end
            end
            File.open(config, "w"){|f|f.write(YAML.dump conf)}
            if use
                cmd  = []
                cmd << "git config --global user.name \"#{user}\""
                cmd << "git config --global user.email \"#{email}\""
                run(cmd)
            end
        when "help"
            puts <<-EOF
= gitgot =

    * Written by Austin Ewens (@aewens_)
    * Copyright 2014-5, Austin Ewens

== Description

    Gitgot is a simple script helps that automates my source version control.
    It is not meant to be anything fancy, but be a utility to simplify my life.

== Usage

    gitgot [command]

== Commands

    help    :: Prints out what you are reading now
    new     :: Creates a new repository using the current directory
    commit  :: Prompts for commit reason and the rest is done automagically
    profile :: Prompts for user credentials to store locally for later reference

EOF
        else
            raise "Wrong command"
        end
    end
end

here = ENV["PWD"].sub("~", ENV["HOME"])
commands(ARGV)
